alloy:
  alloy:
    resources:
      requests:
        cpu: 1000m
        memory: 1000Mi
      limits:
        memory: 2000Mi
    stabilityLevel: "generally-available"
    extraPorts:
    - name: otel-grpc
      port: 4317
      targetPort: 4317
      protocol: TCP
    - name: otel-http
      port: 4318
      targetPort: 4318
      protocol: TCP
    configMap:
      content: |
        prometheus.operator.servicemonitors "default" {
          forward_to = [prometheus.remote_write.mimir.receiver]
          scrape {
            default_scrape_interval = "15s"
          }
        }

        prometheus.operator.podmonitors "default" {
          forward_to = [prometheus.remote_write.mimir.receiver]
          scrape {
            default_scrape_interval = "15s"
          }
        }

        prometheus.operator.probes "default" {
          forward_to = [prometheus.remote_write.mimir.receiver]
          scrape {
            default_scrape_interval = "15s"
          }
        }

        mimir.rules.kubernetes "default" {
          address = "http://mimir-gateway.mimir.svc.cluster.local:80"
          tenant_id = "ben"
        }

        otelcol.receiver.otlp "default" {
          grpc {
            endpoint = "0.0.0.0:4317"
          }
          http {
            endpoint = "0.0.0.0:4318"
          }
          output {
            metrics = [otelcol.processor.k8sattributes.default.input]
            logs    = [otelcol.processor.k8sattributes.default.input]
            traces  = [otelcol.processor.k8sattributes.default.input]
          }
        }

        otelcol.processor.k8sattributes "default" {
          output {
            metrics = [otelcol.processor.batch.default.input]
            logs    = [otelcol.processor.batch.default.input]
            traces  = [otelcol.processor.batch.default.input]
          }
        }

        otelcol.processor.batch "default" {
          output {
            metrics = [otelcol.exporter.prometheus.default.input]
            logs    = [otelcol.exporter.loki.default.input]
            traces  = [otelcol.exporter.otlp.local_tempo.input]
          }
        }

        otelcol.exporter.prometheus "default" {
          forward_to = [prometheus.remote_write.otel_mimir.receiver]
        }

        otelcol.exporter.loki "default" {
          forward_to = [loki.write.local.receiver]
        }

        prometheus.remote_write "mimir" {
          endpoint {
            url = "http://mimir-gateway.mimir.svc.cluster.local/api/v1/push"
            headers = {
              "X-Scope-OrgID" = "ben",
            }
          }
        }

        prometheus.remote_write "otel_mimir" {
          endpoint {
            url = "http://mimir-gateway.mimir.svc.cluster.local/api/v1/push"
            headers = {
              "X-Scope-OrgID" = "otel",
            }
          }
        }

        loki.write "local" {
          endpoint {
            url = "http://loki-gateway.loki.svc.cluster.local:80/loki/api/v1/push"
            headers = {
              "X-Scope-OrgID" = "ben",
            }
          }
        }

        otelcol.exporter.otlp "local_tempo" {
          client {
            endpoint = "tempo-distributor.tempo.svc.cluster.local:4317"
            headers = {
              "X-Scope-OrgID" = "ben",
            }
            tls {
              insecure = true
              insecure_skip_verify = true
            }
          }
        }

  controller:
    type: statefulset
  serviceMonitor:
    enabled: true
